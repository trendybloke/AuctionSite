@using AuctionSite.Data
@using AuctionSite.Helpers
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims;

@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@if (Enabled)
{
	@if (Notifications != null && Notifications.Count > 0)
	{
		<MudToggleIconButton @bind-Toggled="@notifsOpen" Icon="@Icons.Material.Filled.NotificationImportant" ToggledIcon="@Icons.Material.Filled.CircleNotifications" Color="Color.Inherit" ToggledColor="Color.Inherit"/>

		<MudPopover Open="@notifsOpen" Fixed="true" Class="pa-4 mt-4" AnchorOrigin="Origin.CenterRight" TransformOrigin="Origin.TopRight">
			<MudText Typo="Typo.h4">Notifications</MudText>
			<MudList Clickable="true">
				@foreach(var notif in Notifications)
				{
					<MudListItem OnClick="@(() => OnNotificationClick(notif))">@notif.Content</MudListItem>
					<MudDivider />
				}
			</MudList>
		</MudPopover>
	}
	else
	{
		<MudIcon Icon="@Icons.Material.Filled.Notifications" Title="No notifications"/>
	}
}


@code {
	public bool Enabled = true;
	bool notifsOpen = false;

	[Inject]
	IDbContextFactory<ApplicationDbContext>? DbContextFactory { get; set; }

	List<NotificationModel> Notifications;

	public void OnNotificationClick(NotificationModel notif)
	{
		notifsOpen = false;

		Notifications.Remove(notif);

		using(var context = DbContextFactory.CreateDbContext())
		{
			context.Notifications.Remove(notif);
			context.SaveChanges();
		}

		NavigationManager.NavigateTo(notif.RedirectURL);
	}

	public async Task PopulateNotifications(string userid)
	{
		using(var context = DbContextFactory.CreateDbContext())
		{
			Notifications = context.Notifications
										.Where(n => n.UserID == userid)
										.ToList();
		}

		if (Notifications.Count() > 0)
		{
			Snackbar.Add($"{Notifications.Count()} new notification(s)", Severity.Info);
		}

		await InvokeAsync(StateHasChanged);
	}

	public void SetEnabled(bool state)
	{
		Enabled = state;
		InvokeAsync(StateHasChanged);
	}
}
