@page "/login"
@inherits PageBase
@inject UserManager<ApplicationUser> UserManager
@inject IDataProtectionProvider DataProtectionProvider

<h3>Login</h3>

<EditForm Model="@LoginUserData" OnValidSubmit="OnValidSubmit">
	<DataAnnotationsValidator/>
	<MudCard>
		<MudCardContent>
			<MudTextField	
				Label="Email" 
				@bind-Value="LoginUserData.Email" 
				For="@(() => LoginUserData.Email)"/>
			<MudTextField	
				Label="Password" 
				@bind-Value="LoginUserData.Password" 
				For="@(() => LoginUserData.Password)" 
				InputType="InputType.Password"/>
		</MudCardContent>
		<MudCardActions>
			<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
				Sign in
			</MudButton>
		</MudCardActions>
	</MudCard>
</EditForm>

@code {
	public LoginUser LoginUserData { get; set; } = new LoginUser();

	[Parameter]
	public string? ReturnPath { get; set; }


	public async Task OnValidSubmit()
	{
		try
		{
			var user = await UserManager.FindByEmailAsync(LoginUserData.Email) ?? await UserManager.FindByNameAsync(LoginUserData.Email);
			if(user != null && (!user.LockoutEnabled))
			{
				var passwordOk = await UserManager.CheckPasswordAsync(user, LoginUserData.Password);

				if (passwordOk)
				{
					var token = await UserManager.GenerateUserTokenAsync(user, TokenOptions.DefaultProvider, "LoginInternal");
					var data = $"{user.Id}|{token}|{true}|{ReturnPath ?? "/"}";
					var protector = DataProtectionProvider.CreateProtector("LoginInternal");
					var protectedData = protector.Protect(data);

					NavigationManager.NavigateTo($"/Account/LoginInternal?token={protectedData}", true);
				}
				else
				{
					Snackbar.Add("Invalid login attempt.", Severity.Warning);

					LoginUserData.Password = "";
				}
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add(ex.Message, Severity.Error);
		}
	}
}
