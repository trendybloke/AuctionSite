@page "/auction/new"
@attribute [Authorize(Roles = $"{Roles.Admin}")]

@using AuctionSite.Converters

@inherits PageBase

@inject AuctionService AuctionService
@inject ImageService ImageService

<MudPaper Elevation="4" Class="pa-4 ma-4">
	<MudText Typo="Typo.h3">Create New Auction</MudText>
	<EditForm Model="auction">

		<MudTextField	Disabled="loading"
						Label="Title"
						@bind-Value="auction.Title"/>

		<MudTextField Disabled="loading"
					  Label="Description"
					  @bind-Value="auction.Description" />

		<MudNumericField	Disabled="loading"
							Label="Start Price"
							@bind-Value="auction.StartPrice"
							Adornment="Adornment.Start"
							AdornmentText="£"/>

		<MudNumericField	Disabled="loading"
							Label="Reserve Price (optional)"
							@bind-Value="auction.ReservePrice"
							Adornment="Adornment.Start"
							AdornmentText="£"/>

		<MudStack Style="width:100%">
			<MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnInputFileChanged" Hidden="false"
				Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
				InputStyle="opacity:0" @ondragenter="SetDragClass" @ondragleave="ClearDragClass" @ondragend="ClearDragClass">
				<ButtonTemplate Context="buttoncontext">
					<MudPaper Outlined="true" Height="300px" Class="@DragClass">
						<MudText Typo="Typo.h6">Drag and drop images or click here (Max. 10 files)</MudText>
						@if(images is not null)
						{
							<div class="d-flex">
								@foreach(var image in images)
								{
									<MudPaper Elevation="3" Class="flex-none d-flex">
										<img src="@image.ConvertToBrowserRenderableFile()" style="height:80px; width:80px;"/>
										<MudText Class="pa-4">@($"{image.Name}")</MudText>
									</MudPaper>
									<MudSpacer/>
								}
							</div>
						}
						else
						{
							<MudText>No images uploaded.</MudText>
						}
					</MudPaper>
				</ButtonTemplate>
			</MudFileUpload>
		</MudStack>

		<MudSelect Disabled="loading"
				   Label="Item Condition"
				   T="ItemCondition"
				   @bind-Value="auction.Condition">
			<MudSelectItem Value="@ItemCondition.New">New</MudSelectItem>
			<MudSelectItem Value="@ItemCondition.Used">Used</MudSelectItem>
			<MudSelectItem Value="@ItemCondition.Average">Average</MudSelectItem>
			<MudSelectItem Value="@ItemCondition.Poor">Poor</MudSelectItem>
		</MudSelect>

		<MudPaper>
			<MudText>Categories</MudText>
			<MudCheckBox Disabled="loading" Label="Complete system" T="bool" @bind-Checked="completeSys" />
			<MudCheckBox Disabled="loading" Label="Incomplete system" T="bool" @bind-Checked="incompleteSys" />
			<MudCheckBox Disabled="loading" Label="Faulty system" T="bool" @bind-Checked="faultySys" />
			<MudCheckBox Disabled="loading" Label="System component" T="bool" @bind-Checked="sysComponent" />
		</MudPaper>

		<MudDatePicker	Disabled="loading"
						Label="Start Date"
						@bind-Date="startDate"/>

		<MudTimePicker	Disabled="loading"
						Label="Start Time"
						@bind-Time="startTime"/>

		<MudNumericField	Disabled="loading"
							Label="Auction Duration (Days)"
							Min="3"
							Max="14"
							@bind-Value="auctionDuration"/>

		<MudSpacer />

		<MudButton Disabled="loading" OnClick="@OnSubmit">Submit</MudButton>

	</EditForm>
	@if (loading)
	{
		<MudProgressLinear Indeterminate="true" Color="Color.Secondary" />
	}
</MudPaper>

@code {
	bool loading = false;

	AuctionModel auction;

	List<UploadedFile> images;

	static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
	string DragClass = DefaultDragClass;

	// category flags
	bool completeSys = false;
	bool incompleteSys = false;
	bool faultySys = false;
	bool sysComponent = false;
	//

	DateTime? startDate { get; set; }

	TimeSpan? startTime { get; set; }

	int auctionDuration = 3;

	private void SetDragClass()
	{
		DragClass = $"{DefaultDragClass} + mud-border-primary";
	}

	private void ClearDragClass()
	{
		DragClass = DefaultDragClass;
	}

	private async void OnInputFileChanged(InputFileChangeEventArgs e)
	{
		var files = e.GetMultipleFiles();

		images = new List<UploadedFile>();

		foreach(var file in files)
		{
			images.Add(await file.ConvertToUploadedFileAsync());
		}

		await InvokeAsync(StateHasChanged);
	}

	protected override Task OnInitializedAsync()
	{
		auction = new AuctionModel()
		{
			CreatorUserID = CurrentUser.GetUserID(),
			ImageIDs = new List<int>()
		};

		return base.OnInitializedAsync();
	}

	public async void OnSubmit()
	{
		loading = true;

		await InvokeAsync(StateHasChanged);

		foreach(var image in images)
		{
			// Save images
			int newid = await ImageService.UploadImageAsync(image);

			if(newid == -1)
			{
				Snackbar.Add($"Could not upload {image.Name}", Severity.Error);
				continue;
			}

			// Add image IDs to the auction image ID list 
			auction.ImageIDs.Add(newid);
		}

		// build rest of auction
		auction.StartDate = startDate.Value.Add(startTime.Value);
		auction.EndDate = auction.StartDate.AddDays(auctionDuration);

		int categoryField = 0;
		categoryField += completeSys ? 1 : 0;
		categoryField += incompleteSys ? 2 : 0;
		categoryField += faultySys ? 4 : 0;
		categoryField += sysComponent ? 8 : 0;

		auction.Category = (AuctionCategory)categoryField;

		if(startDate >= DateTime.Now)
		{
			auction.State = AuctionState.Open;
		}

		// auction has been built

		var success = await AuctionService.CreateAuctionAsync(auction);

		if (success)
		{
			Snackbar.Add($"Auction {auction.Title} has been added", Severity.Success);
			auction = new AuctionModel();
		}
		else
		{
			Snackbar.Add($"Failed to add Auction", Severity.Error);
		}

		loading = false;

		await InvokeAsync(StateHasChanged);
	}

}
