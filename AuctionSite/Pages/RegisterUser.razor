@page "/signup"

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IDataProtectionProvider DataProtectionProvider


<MudPaper Elevation="4" Class="pa-4 ma-4">
	<MudText Typo="Typo.h3">Register account</MudText>

	@if (!String.IsNullOrEmpty(error))
	{
		<MudAlert Severity="Severity.Error">
			<MudText>@error</MudText>
		</MudAlert>		
	}

	<EditForm Model="newUser">
		<MudTextField	Disabled="loading" 
						Label="Email"
						@bind-Value="newUser.Email"
						InputType="InputType.Email"/>

		<MudTextField	Disabled="loading"
						Label="Username"
						@bind-Value="newUser.UserName"/>

		<MudTextField	Disabled="loading"
						Label="Password"
						@bind-Value="password"
						InputType="InputType.Password"/>

		<MudTextField   Disabled="loading"
						Label="Confirm Password"
						@bind-Value="confPass"
						InputType="InputType.Password"/>

		<MudButton OnClick="OnSubmit" Disabled="loading">Sign up</MudButton>

		@if (loading)
		{
			<MudProgressLinear Indeterminate="true" Color="Color.Secondary"/>
		}
	</EditForm>
</MudPaper>

@code {
	bool loading = false;

	ApplicationUser newUser;

	string password;
	string confPass;

	string error = "";

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		newUser = new ApplicationUser();
	}

	async void OnSubmit()
	{
		loading = true;
		await InvokeAsync(StateHasChanged);

		if (!password.Equals(confPass))
		{
			error = "Passwords do not match";
			await InvokeAsync(StateHasChanged);
			return;
		}

		var createResult = await UserManager.CreateAsync(newUser, password);

		if (!createResult.Succeeded)
		{
			error = $"Failed to create account: {createResult.Errors}";
			await InvokeAsync(StateHasChanged);
			return;
		}

		var roleAddResult = await UserManager.AddToRoleAsync(newUser, Roles.Student);

		if (!roleAddResult.Succeeded)
		{
			error = $"Failed to create account: {roleAddResult.Errors}";
			await InvokeAsync(StateHasChanged);
			return;
		}

		var user = await UserManager.FindByEmailAsync(newUser.Email);

		var token = await UserManager.GenerateUserTokenAsync(user, TokenOptions.DefaultProvider, "LoginInternal");
		var data = $"{user.Id}|{token}|{true}|/";
		var protector = DataProtectionProvider.CreateProtector("LoginInternal");
		var protectedData = protector.Protect(data);

		NavigationManager.NavigateTo($"/Account/LoginInternal?token={protectedData}", true);
	}
}
